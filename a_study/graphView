import sys
from PyQt5.QtWidgets import QApplication, QGraphicsView, QGraphicsScene, QGraphicsItem, QGraphicsEllipseItem, \
    QGraphicsLineItem
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QPainter, QPen

class Node(QGraphicsEllipseItem):
    def __init__(self, x, y, size=20):
        super().__init__(0, 0, size, size)
        self.setPos(x, y)
        self.setBrush(Qt.blue)
        self.setFlag(QGraphicsItem.ItemIsMovable)
        self.setFlag(QGraphicsItem.ItemIsSelectable)

class Edge(QGraphicsLineItem):
    def __init__(self, start_node, end_node):
        super().__init__(start_node.x() + 10, start_node.y() + 10, end_node.x() + 10, end_node.y() + 10)
        self.setPen(QPen(Qt.black, 2, Qt.SolidLine, Qt.RoundCap, Qt.RoundJoin))
        self.setFlag(QGraphicsItem.ItemIsSelectable)

class GraphScene(QGraphicsScene):
    def __init__(self):
        super().__init__()
        self.start_node = None
        self.end_node = None
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.create_edge)
        self.timer.setSingleShot(True)

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            item = self.itemAt(event.scenePos(), QTransform())
            if isinstance(item, Node):
                if self.start_node is None:
                    self.start_node = item
                    self.timer.start(1000)  # 设置延迟1秒
                else:
                    self.end_node = item
                    self.create_edge()

            else:
                if self.start_node is not None:
                    self.start_node = None
                    self.timer.stop()

                # 在空白处创建新节点
                new_node = Node(event.scenePos().x(), event.scenePos().y())
                self.addItem(new_node)

        elif event.button() == Qt.RightButton:
            item = self.itemAt(event.scenePos(), QTransform())
            if isinstance(item, Node):
                # 删除节点
                self.removeItem(item)
                # 删除与该节点相关的边
                for edge in self.items():
                    if isinstance(edge, Edge) and (edge.startItem() == item or edge.endItem() == item):
                        self.removeItem(edge)

    def create_edge(self):
        if self.start_node is not None and self.end_node is not None and self.start_node != self.end_node:
            edge = Edge(self.start_node, self.end_node)
            self.addItem(edge)
            self.start_node = None
            self.end_node = None

class GraphView(QGraphicsView):
    def __init__(self):
        super().__init__()
        self.setScene(GraphScene())
        self.setRenderHint(QPainter.Antialiasing, True)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    view = GraphView()
    view.show()
    sys.exit(app.exec_())
